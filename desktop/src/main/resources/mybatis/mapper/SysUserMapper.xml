<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gitile.desktop.base.model.SysUser" >
	
	<resultMap id="BaseResultMap" type="com.gitile.desktop.base.model.SysUser">
		<result column="id" property="id" />
		<result column="role_id" property="roleId" />
		<result column="username" property="username" />
		<result column="password" property="password" />
		<result column="salt" property="salt" />
		<result column="failure_login_count" property="failureLoginCount" />
		<result column="last_login_time" property="lastLoginTime" />
		<result column="status" property="status" />
		<result column="created_time" property="createdTime" />
		<result column="last_modified_time" property="lastModifiedTime" />
	</resultMap>
	<sql id="Base_Column_List">
		id,role_id,username,password,salt,failure_login_count,last_login_time,status,created_time,last_modified_time
	</sql>
	<select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.Long" >
		select <include refid="Base_Column_List" /> from sys_user where id = #{id}
	</select>
	<delete id="delete" parameterType="java.lang.Long" >
		delete from sys_user where id = #{id}
	</delete>
	<insert id="save" parameterType="com.gitile.desktop.base.model.SysUser" useGeneratedKeys="true" keyProperty="id">
		insert into sys_user(role_id,username,password,salt,failure_login_count,last_login_time,status,created_time,last_modified_time) values (#{roleId},#{username},#{password},#{salt},#{failureLoginCount},#{lastLoginTime},#{status},#{createdTime},#{lastModifiedTime});
	</insert>
	<update id="update" parameterType="com.gitile.desktop.base.model.SysUser" >
		update sys_user
		<set> 
			role_id = #{roleId},
			username = #{username},
			password = #{password},
			salt = #{salt},
			failure_login_count = #{failureLoginCount},
			last_login_time = #{lastLoginTime},
			status = #{status},
			created_time = #{createdTime},
			last_modified_time = #{lastModifiedTime},
		</set> 
		where id = #{id}
	</update>
	<update id="updateSelective" parameterType="com.gitile.desktop.base.model.SysUser" >
		update sys_user
		<set> 
			<if test="roleId != null">role_id = #{roleId},</if>
			<if test="username != null">username = #{username},</if>
			<if test="password != null">password = #{password},</if>
			<if test="salt != null">salt = #{salt},</if>
			<if test="failureLoginCount != null">failure_login_count = #{failureLoginCount},</if>
			<if test="lastLoginTime != null">last_login_time = #{lastLoginTime},</if>
			<if test="status != null">status = #{status},</if>
			<if test="createdTime != null">created_time = #{createdTime},</if>
			<if test="lastModifiedTime != null">last_modified_time = #{lastModifiedTime},</if>
		</set> 
		where id = #{id}
	</update>
	<sql id="Example_Where_Clause" >
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or" >
				<if test="criteria.valid" >
					<trim prefix="(" suffix=")" prefixOverrides="and" >
						<foreach collection="criteria.criteria" item="criterion" >
							<choose >
								<when test="criterion.noValue" >and ${criterion.condition}</when>
								<when test="criterion.singleValue" >and ${criterion.condition} #{criterion.value}</when>
								<when test="criterion.betweenValue" >and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}</when>
								<when test="criterion.listValue" >
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
										#{listItem}
									</foreach>
								</when>
							</choose >
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause" >
		<where>
			<foreach collection="example.oredCriteria" item="criteria" separator="or" >
				<if test="criteria.valid" >
					<trim prefix="(" suffix=")" prefixOverrides="and" >
						<foreach collection="criteria.criteria" item="criterion" >
							<choose >
								<when test="criterion.noValue" >and ${criterion.condition}</when>
								<when test="criterion.singleValue" >and ${criterion.condition} #{criterion.value}</when>
								<when test="criterion.betweenValue" >and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}</when>
								<when test="criterion.listValue" >
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
										#{listItem}
									</foreach>
								</when>
							</choose >
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap" parameterType="com.gitile.desktop.base.model.SysUserExample" >
		select
		<if test="distinct" >
			distinct
		</if>
		'true' as QUERYID,
		<include refid="Base_Column_List" />
		from sys_user
		<if test="_parameter != null" >
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null" >
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectListByExample" resultMap="BaseResultMap" parameterType="com.gitile.desktop.base.model.SysUserExample" >
		select
		<if test="distinct" >
			distinct
		</if>
		'true' as QUERYID,
		<include refid="Base_Column_List" />
		from sys_user
		<if test="_parameter != null" >
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null" >
			order by ${orderByClause}
		</if>
		<if test="limitByClause != null" >
			limit ${limitByClause}
		</if>
	</select>
	<select id="selectCountByExample" resultType="java.lang.Integer" parameterType="com.gitile.desktop.base.model.SysUserExample" >
		select count(*) from sys_user
		<if test="_parameter != null" >
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExample" parameterType="map" >
		update sys_user
		<set> 
			role_id = #{record.roleId},
			username = #{record.username},
			password = #{record.password},
			salt = #{record.salt},
			failure_login_count = #{record.failureLoginCount},
			last_login_time = #{record.lastLoginTime},
			status = #{record.status},
			created_time = #{record.createdTime},
			last_modified_time = #{record.lastModifiedTime},
		</set> 
		<if test="_parameter != null" >
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExampleSelective" parameterType="map" >
		update sys_user
		<set> 
			<if test="record.roleId != null">role_id = #{record.roleId},</if>
			<if test="record.username != null">username = #{record.username},</if>
			<if test="record.password != null">password = #{record.password},</if>
			<if test="record.salt != null">salt = #{record.salt},</if>
			<if test="record.failureLoginCount != null">failure_login_count = #{record.failureLoginCount},</if>
			<if test="record.lastLoginTime != null">last_login_time = #{record.lastLoginTime},</if>
			<if test="record.status != null">status = #{record.status},</if>
			<if test="record.createdTime != null">created_time = #{record.createdTime},</if>
			<if test="record.lastModifiedTime != null">last_modified_time = #{record.lastModifiedTime},</if>
		</set> 
		<if test="_parameter != null" >
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
</mapper>